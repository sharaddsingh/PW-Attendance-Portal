rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============= HELPER FUNCTIONS =============
    // Core authentication and authorization helpers
    
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid));
    }
    
    function getProfileData() {
      return get(/databases/$(database)/documents/profiles/$(request.auth.uid));
    }
    
    function hasRole(role) {
      return isAuthenticated() && 
        getUserData().data.role == role;
    }
    
    function isStudent() {
      return hasRole('student');
    }
    
    function isFaculty() {
      return hasRole('faculty');
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isStudentOrFaculty() {
      return isStudent() || isFaculty();
    }
    
    function isFacultyOrAdmin() {
      return isFaculty() || isAdmin();
    }
    
    function hasCompletedProfile() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/profiles/$(request.auth.uid));
    }
    
    function validateStudentEmail(email) {
      return email.matches('.*@pwioi\\.com$');
    }
    
    function validateFacultyEmail(email) {
      return email.matches('.*@gmail\\.com$');
    }
    
    // ============= USERS COLLECTION =============
    // Basic user information from authentication
    
    match /users/{userId} {
      // Read: Own document or faculty/admin can read any user
      allow read: if isOwner(userId) || isFacultyOrAdmin();
      
      // Create: Only during initial authentication
      allow create: if isOwner(userId) && 
        request.resource.data.keys().hasAll(['uid', 'email', 'displayName']) &&
        request.resource.data.uid == userId &&
        request.resource.data.email == request.auth.token.email;
      
      // Update: Only own document with email/uid protection
      allow update: if isOwner(userId) && 
        request.resource.data.uid == resource.data.uid &&
        request.resource.data.email == resource.data.email;
      
      // Delete: Disabled for data integrity
      allow delete: if false;
    }
    
    // ============= PROFILES COLLECTION =============
    // Detailed user profile information
    
    match /profiles/{profileId} {
      // Read: Own profile, faculty can read student profiles, admin can read all
      allow read: if isOwner(profileId) || 
        (isFaculty() && resource.data.role == 'student') ||
        isAdmin();
      
      // Create: Authenticated users creating their own profile with validation
      allow create: if isOwner(profileId) && 
        request.resource.data.role in ['student', 'faculty'] &&
        ((request.resource.data.role == 'student' && validateStudentEmail(request.auth.token.email)) ||
         (request.resource.data.role == 'faculty' && validateFacultyEmail(request.auth.token.email))) &&
        request.resource.data.keys().hasAll(['role', 'fullName', 'email']);
      
      // Update: Own profile only, role and email cannot be changed
      allow update: if isOwner(profileId) &&
        request.resource.data.role == resource.data.role &&
        request.resource.data.email == resource.data.email;
      
      // Delete: Admin only
      allow delete: if isAdmin();
    }
    
    // ============= ATTENDANCE SESSIONS =============
    // QR code sessions for attendance tracking
    
    match /attendance_sessions/{sessionId} {
      // Read: Faculty own sessions, students active sessions, admin all
      allow read: if isAuthenticated() && (
        (isFaculty() && resource.data.facultyId == request.auth.uid) ||
        (isStudent() && resource.data.isActive == true) ||
        isAdmin()
      );
      
      // Create: Faculty only, creating their own sessions
      allow create: if isFaculty() && 
        request.resource.data.facultyId == request.auth.uid &&
        request.resource.data.keys().hasAll(['facultyId', 'facultyName', 'subject', 'batch', 'school']);
      
      // Update: Faculty can update their own sessions
      allow update: if isFaculty() && 
        resource.data.facultyId == request.auth.uid;
      
      // Delete: Faculty own sessions or admin
      allow delete: if (isFaculty() && resource.data.facultyId == request.auth.uid) ||
        isAdmin();
    }
    
    // ============= ATTENDANCE RECORDS =============
    // Individual attendance marking records
    
    match /attendance/{attendanceId} {
      // Read: Students own records, faculty/admin all
      allow read: if isAuthenticated() && (
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        isFacultyOrAdmin()
      );
      
      // Create: Students marking their own attendance
      allow create: if isStudent() && 
        request.resource.data.studentId == request.auth.uid &&
        request.resource.data.keys().hasAll(['studentId', 'studentName', 'sessionId', 'timestamp']) &&
        exists(/databases/$(database)/documents/attendance_sessions/$(request.resource.data.sessionId));
      
      // Update: Faculty for manual marking
      allow update: if isFaculty();
      
      // Delete: Admin only
      allow delete: if isAdmin();
    }
    
    // ============= LEAVE APPLICATIONS =============
    // Student leave requests
    
    match /leave_applications/{applicationId} {
      // Read: Students own applications, faculty/admin all
      allow read: if isAuthenticated() && (
        (isStudent() && resource.data.studentId == request.auth.uid) ||
        isFacultyOrAdmin()
      );
      
      // Create: Students only, with pending status
      allow create: if isStudent() && 
        request.resource.data.studentId == request.auth.uid &&
        request.resource.data.status == 'pending' &&
        request.resource.data.keys().hasAll(['studentId', 'studentName', 'date', 'reason', 'subject']);
      
      // Update: Students can update pending, faculty can approve/reject
      allow update: if (isStudent() && 
          resource.data.studentId == request.auth.uid && 
          resource.data.status == 'pending') ||
        (isFaculty() && 
          request.resource.data.status in ['approved', 'rejected'] &&
          resource.data.status == 'pending');
      
      // Delete: Students can delete their pending applications
      allow delete: if isStudent() && 
        resource.data.studentId == request.auth.uid &&
        resource.data.status == 'pending';
    }
    
    // ============= ACADEMIC DATA =============
    // Schools, batches, and subjects configuration
    
    match /schools/{schoolId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /batches/{batchId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /subjects/{subjectId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    // ============= NOTIFICATIONS =============
    // User notifications
    
    match /notifications/{notificationId} {
      // Read: Own notifications only
      allow read: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
      
      // Create: Backend only via Cloud Functions
      allow create: if false;
      
      // Update: Mark as read only
      allow update: if isAuthenticated() && 
        resource.data.userId == request.auth.uid &&
        request.resource.data.isRead == true;
      
      // Delete: Own notifications
      allow delete: if isAuthenticated() && 
        resource.data.userId == request.auth.uid;
    }
    
    // ============= SYSTEM COLLECTIONS =============
    
    match /attendance_reports/{reportId} {
      allow read: if isFacultyOrAdmin();
      allow create, update, delete: if false; // Backend only
    }
    
    match /system_config/{configId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isAdmin();
    }
    
    match /audit_logs/{logId} {
      allow read: if isAdmin();
      allow create, update, delete: if false; // Backend only
    }
  }
}
