rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // ============= HELPER FUNCTIONS =============
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Get user role from custom claims or Firestore
    function getUserRole() {
      return request.auth.token.role;
    }
    
    // Check if user is a student
    function isStudent() {
      return isAuthenticated() && getUserRole() == 'student';
    }
    
    // Check if user is faculty
    function isFaculty() {
      return isAuthenticated() && getUserRole() == 'faculty';
    }
    
    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    // Validate file size (max 5MB for images, 10MB for documents)
    function isValidImageSize() {
      return request.resource.size < 5 * 1024 * 1024;
    }
    
    function isValidDocumentSize() {
      return request.resource.size < 10 * 1024 * 1024;
    }
    
    // Validate image file types
    function isImage() {
      return request.resource.contentType.matches('image/(jpeg|jpg|png|gif|webp)');
    }
    
    // Validate document file types
    function isDocument() {
      return request.resource.contentType.matches('(application/pdf|application/msword|application/vnd.openxmlformats-officedocument.wordprocessingml.document)');
    }
    
    // ============= PROFILE PICTURES =============
    // User profile pictures storage
    
    match /profile_pictures/{userId}/{fileName} {
      // Read: Public access for profile pictures
      allow read: if isAuthenticated();
      
      // Write: Users can only upload their own profile pictures
      allow create, update: if isOwner(userId) && 
        isImage() && 
        isValidImageSize();
      
      // Delete: Users can delete their own profile pictures
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // ============= ATTENDANCE PHOTOS =============
    // Photos captured during attendance marking
    
    match /attendance_photos/{sessionId}/{studentId}/{fileName} {
      // Read: Student (own), Faculty (all in their sessions), Admin (all)
      allow read: if isAuthenticated() && (
        isOwner(studentId) ||
        isFaculty() ||
        isAdmin()
      );
      
      // Create: Students can upload attendance photos
      allow create: if isStudent() && 
        isOwner(studentId) &&
        isImage() && 
        isValidImageSize();
      
      // Update: Not allowed (attendance photos should be immutable)
      allow update: if false;
      
      // Delete: Admin only (for data cleanup)
      allow delete: if isAdmin();
    }
    
    // ============= QR CODES =============
    // Generated QR codes for attendance sessions
    
    match /qr_codes/{sessionId}/{fileName} {
      // Read: Faculty (own sessions) and Students (active sessions)
      allow read: if isAuthenticated();
      
      // Create/Update: Faculty only for their sessions
      allow create, update: if isFaculty() && 
        isImage() && 
        isValidImageSize();
      
      // Delete: Faculty (own) or Admin
      allow delete: if isFaculty() || isAdmin();
    }
    
    // ============= LEAVE ATTACHMENTS =============
    // Documents attached to leave applications
    
    match /leave_attachments/{applicationId}/{fileName} {
      // Read: Student (own), Faculty (all), Admin (all)
      allow read: if isAuthenticated();
      
      // Create: Students only, for their own applications
      allow create: if isStudent() && 
        (isImage() || isDocument()) && 
        isValidDocumentSize();
      
      // Update: Students can update their own pending applications
      allow update: if isStudent() && 
        (isImage() || isDocument()) && 
        isValidDocumentSize();
      
      // Delete: Students (own pending) or Admin
      allow delete: if isStudent() || isAdmin();
    }
    
    // ============= REPORTS =============
    // Generated attendance reports and exports
    
    match /reports/{reportType}/{fileName} {
      // Read: Faculty and Admin only
      allow read: if isFaculty() || isAdmin();
      
      // Create/Update: System-generated only (via Cloud Functions/Admin SDK)
      allow create, update: if false;
      
      // Delete: Admin only
      allow delete: if isAdmin();
    }
    
    // ============= ACADEMIC DOCUMENTS =============
    // Course materials, syllabi, etc.
    
    match /academic_documents/{schoolId}/{documentType}/{fileName} {
      // Read: All authenticated users
      allow read: if isAuthenticated();
      
      // Create/Update: Faculty and Admin
      allow create, update: if (isFaculty() || isAdmin()) &&
        (isDocument() || isImage()) &&
        isValidDocumentSize();
      
      // Delete: Admin only
      allow delete: if isAdmin();
    }
    
    // ============= SYSTEM FILES =============
    // System configuration and assets
    
    match /system/{path=**} {
      // Read: Public access for system assets
      allow read: if true;
      
      // Write: Admin only
      allow write: if isAdmin();
    }
    
    // ============= TEMPORARY UPLOADS =============
    // Temporary storage for file processing
    
    match /temp/{userId}/{fileName} {
      // Read/Write: Users can manage their own temp files
      allow read, write: if isOwner(userId) &&
        request.resource.size < 20 * 1024 * 1024; // 20MB max
      
      // Note: Implement Cloud Function to auto-delete temp files after 24 hours
    }
    
    // ============= BACKUP =============
    // Database backups (Admin only)
    
    match /backups/{path=**} {
      // Admin only access
      allow read, write: if isAdmin();
    }
    
    // ============= DEFAULT DENY =============
    // Deny access to any other paths
    
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}